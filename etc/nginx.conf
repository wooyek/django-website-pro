
upstream {{ project_name }}_app_server {
    server unix:/var/www/{{ project_name }}/var/gunicorn.sock fail_timeout=0;
    # For a TCP configuration:
    # server 192.168.0.7:8000 fail_timeout=0;
}

server {
    # This will return something unusable for all the port scanning software
    # and robots with outdated domain names out there
    # limiting the number of invalid hostname errors
    listen 80 default;
    return 418;
}

server {
    listen 80;
    client_max_body_size 4G;
    # This will keep Django from receiving request with invalid host
    server_name 127.0.0.1 *.example.com vagrant {{ project_name|slugify }};

    keepalive_timeout 5;

    # path for static files
    # root /path/to/app/current/public;
    # root /var/www/{{ project_name }}/public;

    access_log /var/www/{{ project_name }}/logs/nginx-access.log;
    error_log /var/www/{{ project_name }}/logs/nginx-error.log;

    location /static/ {
        alias   /var/www/{{ project_name }}/static/;
    }

    location /media/ {
        alias   /var/www/{{ project_name }}/media/;
    }
    
    location = /robots.txt {
        alias /var/www/{ project_name }}/static/assets/robots.txt;
    }
    
    location / {
        # checks for static file, if not found proxy to app
        try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        proxy_pass   http://{{ project_name }}_app_server;
    }

    # error_page 500 502 503 504 /500.html;
    # location = /500.html {
        # root /path/to/app/current/public;
    #    root /var/www/{{ project_name }}/public;
    # }
}

